{"version":3,"sources":["App.js","deeplink.js","serviceWorker.js","index.js"],"names":["Link","styled","a","deeplink","props","state","store","this","iframeEl","fallbackTimer","iTunesLink","playStoreLink","pcVersionLink","androidPackage","useFallback","ua","fallbackUrl","window","navigator","userAgent","isAndroid","test","isIOS","isMobile","settings","appDownLink","delay","delta","makeURI","uri","match","matches","encodeURIComponent","join","openApp","indexOf","document","location","href","openAppWithIframe","openAppStore","setFallback","now","waitForHidden","setInterval","hidden","webkitHidden","clearTimeout","clearInterval","wait","Date","createElement","id","style","width","height","visibility","body","appendChild","onload","src","parentNode","removeChild","redirectToApp","setTimeout","Deeplink","onClick","React","Component","Boolean","hostname","ReactDOM","render","StrictMode","App","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kZAIA,IAAMA,E,MAAOC,EAAOC,EAAV,KA0EKC,E,kDA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,uLAJYC,M,kBACtB,I,6JAUPC,KAAKJ,SCdM,YAOT,IAeEK,EACAC,EAhBH,IANDC,kBAMC,MANY,2BAMZ,MALDC,qBAKC,MALe,qCAKf,OAJDC,cAIC,EAHDC,uBAGC,MAHgB,YAGhB,MAFDC,mBAEC,SACKC,GADL,EADDC,YAEWC,OAAOC,UAAUC,WACtBC,EAAY,YAAYC,KAAKN,GAC7BO,EAAQ,qBAAqBD,KAAKN,GAClCQ,EAAWH,GAAaE,EAGxBE,EAAW,CACfC,YAAaH,EAAQZ,EAAaC,EAClCE,iBACAC,cACAY,MAAO,IACPC,MAAO,KAUHC,EAAU,SAAAC,GACd,GAAIT,IAAcF,UAAUC,UAAUW,MAAM,WAAY,CAItD,IAAMC,EAAUF,EAAIC,MAAM,sBAE1BD,EAAM,CAAC,YAAD,OACQE,EAAQ,GADhB,4BAEMA,EAAQ,IAFd,kBAGOP,EAASX,gBAHhB,iCAIsBmB,mBAAmBR,EAASR,cACtD,OACAiB,KAAK,KAGT,OAAOJ,GAGHK,EAAU,SAAAL,GACVP,GAAUF,GAAaS,EAAIM,QAAQ,WAAa,EAClDC,SAASC,SAASC,KAAOT,EAEzBU,EAAkBV,IAIhBW,EAAe,WACnBJ,SAASC,SAASC,KAAOd,EAASC,aAG9BgB,EAAc,SAAAC,GAElB,IAAMC,EAAgBC,aAAY,YAC5BR,SAASS,QAAUT,SAASU,gBAC9BC,aAAatC,GACbuC,cAAcL,MAEf,KAEH,OAAO,WACLK,cAAcL,GACd,IAAMM,EAAOzB,EAASE,MAAQF,EAASG,MAInCuB,KAAKR,MAAQA,EAAMO,IACrBb,SAASC,SAASC,KAAOd,EAASC,eASlCc,EAAoB,SAAAV,IACxBrB,EAAW4B,SAASe,cAAc,WACzBC,GAAK,OACd5C,EAAS6C,MAAMC,MAAQ,EACvB9C,EAAS6C,MAAME,OAAS,EACxB/C,EAAS6C,MAAMG,WAAa,SAC5BpB,SAASqB,KAAKC,YAAYlD,GAE1BA,EAASmD,OAAS,WAChBnD,EAASoD,IAAM/B,EACXrB,EAASqD,YACXrD,EAASqD,WAAWC,YAAYtD,KAKtC,MAAO,CACLuD,cAAe,WACTxC,EACFW,EAAQN,EAFoB,uDAAP,KAIrBY,IAIEhB,EAASV,cACXL,EAAgBuD,WAAWvB,EAAYS,KAAKR,OAAQlB,EAASE,UDjGnDuC,CAAS,CACvBvD,WAAY,kDACZC,cAAe,yCACfE,eAAgB,sBAChBC,aAAa,EACbE,YAAa,4B,+BAKP,IAAD,OACP,OACE,0CAEE,kBAAChB,EAAD,CACEkE,QAAS,WACP,EAAK/D,SAAS4D,cAAd,8CAFJ,mCAOA,kBAAC/D,EAAD,CACEkE,QAAS,WACP,EAAK/D,SAAS4D,cAAd,8CAFJ,4B,GAjCeI,IAAMC,WECTC,QACW,cAA7BpD,OAAOoB,SAASiC,UAEe,UAA7BrD,OAAOoB,SAASiC,UAEhBrD,OAAOoB,SAASiC,SAASxC,MACvB,2DCbNyC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFtC,SAASuC,eAAe,SD0HpB,kBAAmBzD,WACrBA,UAAU0D,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dff9e382.chunk.js","sourcesContent":["import React from 'react'\nimport Deeplink from './deeplink'\nimport styled from 'styled-components'\n\nconst Link = styled.a`\n  display: block;\n  margin: 1rem 0;\n  font-weight: bold;\n  font-family: consolas;\n`\n\nclass deeplink extends React.Component {\n  static async getInitialProps({ store }) {\n    return {}\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  componentDidMount() {\n    // 네이버앱으로 테스트\n    this.deeplink = Deeplink({\n      iTunesLink: 'http://itunes.apple.com/kr/app/id393499958?mt=8', // ios 앱다운로드 링크\n      playStoreLink: 'http://m.androidapp.naver.com/naverapp', // android 앱다운로드 링크\n      androidPackage: 'com.emoticbox.store',\n      useFallback: true,\n      fallbackUrl: 'https://www.naver.com'\n    });\n    // document.location.href = `EmoticboxStoreApp://EmoticonInfo/:emoticonId`;\n  }\n\n  render() {\n    return (\n      <div>\n        Emoticbox!\n        <Link\n          onClick={() =>{\n            this.deeplink.redirectToApp(`EmoticboxStoreApp://?referralServiceId=2`);\n          }}\n        >\n          앱 다운로드\n        </Link>\n        <Link\n          onClick={() =>{\n            this.deeplink.redirectToApp(`EmoticboxStoreApp://?referralServiceId=2`);\n          }}\n        >\n          앱실행!\n        </Link>\n      </div>\n    )\n  }\n  //     <div>\n  //       <h2>네이버앱</h2>\n  //       <Link\n  //         onClick={() =>\n  //           this.deeplink.redirectToApp(`naversearchapp://default?version=1`)\n  //         }\n  //       >\n  //         naversearchapp://default?version=1\n  //       </Link>\n  //       <Link\n  //         onClick={() =>\n  //           this.deeplink.redirectToApp(\n  //             `naversearchapp://search?qmenu=voicerecg&version=1`\n  //           )\n  //         }\n  //       >\n  //         테스트3\n  //       </Link>\n  //       <a href=\"https://link.coupang.com/re/AFFPROMO?lptag=AF5734182&pageKey=75739&traceid=V0-181-a482819dd1faa9e1\">Test Click</a>\n  //     </div>\n  //   )\n  // }\n}\n\nexport default deeplink\n// import React from 'react';\n// import {Link} from 'react-router-dom';\n\n// const App = () => {\n//   let message;\n//   if (navigator.userAgent.match(/iPad/i)){\n//     message = \"ipad\";\n//   } else if (navigator.userAgent.match(/Tablet/i)){\n//     message = \"Tablet\";\n//   } else if (navigator.userAgent.match(/Android/i)){\n//     message = \"Android\";\n//   } else if (navigator.userAgent.match(/iPhone|iPod/i)){\n//     message = \"Iphone\";\n//   } else {\n//     message = \"PC\";\n//   }\n//   return (\n//     <div className=\"App\">\n//         <a href=\"emoticbox://emoticon\">{message}</a>\n//     </div>\n//   );\n// }\n\n// export default App;\n","/**\n * web to app with depplink\n *\n * @param option.iTunesLink ios 앱다운로드 링크\n * @param option.playStoreLink  android 앱다운로드 링크\n * @param option.androidPackage 안드로이드 앱이 있다면 필수\n * @param option.useFallback 딥링크 이동 실패했을 때 앱스토어로 이동 여부\n * @param option.fallbackUrl 앱 실행, 다운로드가 불가능할 때 사용, android intent에 사용함\n */\nexport default function Deeplink({\n    iTunesLink = 'https://itunes.apple.com',\n    playStoreLink = 'https://play.google.com/store/apps',\n    pcVersionLink = 'http://www.naver.com/',\n    androidPackage = 'com.myapp',\n    useFallback = true,\n    fallbackUrl = 'about:blank',\n  }) {\n    const ua = window.navigator.userAgent // 브라우저 user agent string\n    const isAndroid = /android/gi.test(ua)\n    const isIOS = /iphone|ipad|ipod/gi.test(ua)\n    const isMobile = isAndroid || isIOS\n    // const isSafariBrowser = isIOS && /version/gi.test(ua)\n  \n    const settings = {\n      appDownLink: isIOS ? iTunesLink : playStoreLink,\n      androidPackage,\n      useFallback, // 딥링크가 유효하지 않아 이동에 실패했을때, 앱스토어로 이동할지\n      delay: 2000,\n      delta: 500,\n    }\n  \n    let iframeEl\n    let fallbackTimer\n  \n    /**\n     * iOS라면 전달받은 URI 그대로 사용,\n     * 안드로이드라면 intent 딥링크를 설정한다.\n     */\n    const makeURI = uri => {\n      if (isAndroid && !navigator.userAgent.match(/Firefox/)) {\n        // ex) myapp://test/id\n        // matchs[1] === myapp\n        // matchs[2] === test/id\n        const matches = uri.match(/([^:]+):\\/\\/(.+)$/i)\n  \n        uri = [\n          `intent://${matches[2]}#Intent`,\n          `scheme=${matches[1]}`,\n          `package=${settings.androidPackage}`,\n          `S.browser_fallback_url=${encodeURIComponent(settings.fallbackUrl)}`,\n          'end',\n        ].join(';')\n      }\n  \n      return uri\n    }\n  \n    const openApp = uri => {\n      if (isIOS || (isAndroid && uri.indexOf('intent') > -1)) {\n        document.location.href = uri\n      } else {\n        openAppWithIframe(uri)\n      }\n    }\n  \n    const openAppStore = () => {\n      document.location.href = settings.appDownLink\n    }\n  \n    const setFallback = now => {\n      // 화면이 표시되지 않음 => 딥링크 이동에 성공 => fallback 링크 이동 타이머를 제거한다\n      const waitForHidden = setInterval(() => {\n        if (document.hidden || document.webkitHidden) {\n          clearTimeout(fallbackTimer)\n          clearInterval(waitForHidden)\n        }\n      }, 200)\n  \n      return () => {\n        clearInterval(waitForHidden)\n        const wait = settings.delay + settings.delta\n  \n        // setTimeout에 설정한 시간은 settings.delay,\n        // 거기에 delta로 스크립트를 실행하는 시간을 충분히 더해준다.\n        if (Date.now() - now < wait) {\n          document.location.href = settings.appDownLink\n        }\n      }\n    }\n  \n    /**\n     * 숨겨진 iframe을 만들고 src 속성에 uri를 할당하는 방식을 사용한다.\n     * @param {*} uri\n     */\n    const openAppWithIframe = uri => {\n      iframeEl = document.createElement('iframe')\n      iframeEl.id = 'test'\n      iframeEl.style.width = 0\n      iframeEl.style.height = 0\n      iframeEl.style.visibility = 'hidden'\n      document.body.appendChild(iframeEl)\n  \n      iframeEl.onload = function () {\n        iframeEl.src = uri\n        if (iframeEl.parentNode) {\n          iframeEl.parentNode.removeChild(iframeEl)\n        }\n      }\n    }\n  \n    return {\n      redirectToApp: (target = '') => {\n        if (isMobile) {\n          openApp(makeURI(target))\n        } else {\n          openAppStore()\n        }\n  \n        // 딥링크를 사용할 수 없을 때를 대비해서 앱 다운로드 페이지로 이동하기 위한 타임아웃을 설정한다.\n        if (settings.useFallback) {\n          fallbackTimer = setTimeout(setFallback(Date.now()), settings.delay)\n        }\n      },\n    }\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}